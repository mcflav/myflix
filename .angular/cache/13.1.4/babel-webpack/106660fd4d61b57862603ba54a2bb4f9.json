{"ast":null,"code":"import { ValidateUser } from '../models/validateUser.model';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../services/users.service\";\nimport * as i3 from \"../services/subscriber.service\";\nimport * as i4 from \"@angular/router\";\nexport let DataStorageService = /*#__PURE__*/(() => {\n  class DataStorageService {\n    constructor(http, usersService, subscriberService, router) {\n      this.http = http;\n      this.usersService = usersService;\n      this.subscriberService = subscriberService;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n      this.subscriptions = [];\n      this._expirationDate = new Date(new Date().getTime() + 86400 * 1000);\n    }\n\n    storeUser(user) {\n      const body = user;\n      return this.http.post('https://sheltered-cliffs-22371.herokuapp.com/api/v1/users', body).pipe(catchError(this.handleError));\n    }\n\n    storeSubscription(order) {\n      const body = order;\n      return this.http.post('https://sheltered-cliffs-22371.herokuapp.com/api/v1/subscription', body).pipe(catchError(this.handleError));\n    }\n\n    updateSubscription(id, order) {\n      const body = order;\n      return this.http.put('https://sheltered-cliffs-22371.herokuapp.com/api/v1/subscription/' + id, body).pipe(catchError(this.handleError));\n    }\n\n    fetchUsers() {\n      return this.http.get('https://sheltered-cliffs-22371.herokuapp.com/api/v1/users').pipe(catchError(this.handleError));\n    }\n\n    fetchSubscription(email) {\n      return this.http.post('https://sheltered-cliffs-22371.herokuapp.com/api/v1/subscription/getSubscription', {\n        email: email\n      }).pipe(catchError(this.handleError));\n    }\n\n    validateUser(email, password) {\n      return this.http.post('https://sheltered-cliffs-22371.herokuapp.com/api/v1/authentication', {\n        email: email,\n        password: password\n      }).pipe(catchError(this.authenticationError), tap(resData => {\n        this.handleAuthentication(resData.auth, resData.token);\n      }));\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new ValidateUser(userData.auth, userData._token, this._expirationDate);\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        const expirationDuration = new Date(this._expirationDate).getTime() - new Date().getTime();\n      }\n    }\n\n    autoLogout(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logOut();\n      }, expirationDuration);\n    }\n\n    logOut() {\n      this.user.next(null);\n      this.router.navigate(['/login']);\n      localStorage.removeItem('userData');\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n\n      this.tokenExpirationTimer = null;\n    }\n\n    handleAuthentication(auth, token) {\n      const expirationDate = new Date(new Date().getTime() + 86400 * 1000);\n      const user = new ValidateUser(auth, token, expirationDate);\n      this.user.next(user);\n      this.autoLogout(86400 * 1000);\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    handleError(errorRes) {\n      const errorMessage = errorRes.error;\n      return throwError(errorMessage);\n    }\n\n    authenticationError(errorRes) {\n      let errorMessage;\n\n      if (errorRes.status === 400 || errorRes.status === 401 && errorRes.error.token !== null || errorRes.status === 401 && errorRes.error.token === null) {\n        errorMessage = \"Invalid Username or Password.\";\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  DataStorageService.ɵfac = function DataStorageService_Factory(t) {\n    return new (t || DataStorageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UsersService), i0.ɵɵinject(i3.SubscriberService), i0.ɵɵinject(i4.Router));\n  };\n\n  DataStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DataStorageService,\n    factory: DataStorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataStorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}