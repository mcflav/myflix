{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, HostListener, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@fortawesome/angular-fontawesome';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { FormsModule } from '@angular/forms';\nlet ShowHideService = /*#__PURE__*/(() => {\n  class ShowHideService {\n    constructor() {\n      this.states = [];\n    }\n\n    getIO(id) {\n      let io = this.states.find(o => o.id === id);\n\n      if (!io && id) {\n        io = this.init(id);\n      }\n\n      return io;\n    }\n\n    init(id) {\n      const subject = new ReplaySubject(1);\n      const io = {\n        id,\n        show: false,\n        subject\n      };\n      this.states.push(io);\n      return io;\n    }\n\n    saveAndProadcast(io, show) {\n      io.show = show;\n      io.subject.next(io.show);\n    }\n\n    getObservable(id) {\n      return this.getIO(id).subject;\n    }\n\n    setShow(id, show) {\n      this.saveAndProadcast(this.getIO(id), show);\n    }\n\n    toggleShow(id) {\n      const io = this.getIO(id);\n      this.saveAndProadcast(io, !io.show);\n    }\n\n  }\n\n  ShowHideService.ɵfac = function ShowHideService_Factory(t) {\n    return new (t || ShowHideService)();\n  };\n\n  ShowHideService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShowHideService,\n    factory: ShowHideService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShowHideService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ShowHideTriggerDirective = /*#__PURE__*/(() => {\n  class ShowHideTriggerDirective {\n    constructor(service, errorHandler) {\n      this.service = service;\n      this.errorHandler = errorHandler;\n    }\n\n    onClick() {\n      if (this.showHideTrigger) {\n        this.service.toggleShow(this.showHideTrigger);\n      } else {\n        this.errorHandler.handleError(new Error(`Status can not be changed without [id].`));\n      }\n    }\n\n  }\n\n  ShowHideTriggerDirective.ɵfac = function ShowHideTriggerDirective_Factory(t) {\n    return new (t || ShowHideTriggerDirective)(i0.ɵɵdirectiveInject(ShowHideService), i0.ɵɵdirectiveInject(i0.ErrorHandler));\n  };\n\n  ShowHideTriggerDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ShowHideTriggerDirective,\n    selectors: [[\"\", \"showHideTrigger\", \"\"]],\n    hostBindings: function ShowHideTriggerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function ShowHideTriggerDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n    },\n    inputs: {\n      showHideTrigger: \"showHideTrigger\"\n    }\n  });\n  return ShowHideTriggerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* eslint-disable @angular-eslint/directive-selector */\n\n\nlet ShowHideStatusDirective = /*#__PURE__*/(() => {\n  class ShowHideStatusDirective {\n    constructor(service, el, renderer, errorHandler) {\n      this.service = service;\n      this.el = el;\n      this.renderer = renderer;\n      this.errorHandler = errorHandler;\n    }\n\n    set showHideStatus(config) {\n      this.init(config);\n    }\n\n    init(config) {\n      const defaultConfig = {\n        show: 'visibility',\n        hide: 'visibility_off',\n        materialIcon: false,\n        id: null\n      };\n      this.config = Object.assign(Object.assign({}, defaultConfig), config);\n\n      if (this.config.id) {\n        this.subscription = this.service.getObservable(this.config.id).subscribe(show => this.updateStatus(show));\n      } else {\n        this.errorHandler.handleError(new Error(`Status can not be set without [id].`));\n      }\n    }\n\n    updateStatus(show) {\n      if (this.config.materialIcon) {\n        this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);\n      } else {\n        this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);\n        this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  ShowHideStatusDirective.ɵfac = function ShowHideStatusDirective_Factory(t) {\n    return new (t || ShowHideStatusDirective)(i0.ɵɵdirectiveInject(ShowHideService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ErrorHandler));\n  };\n\n  ShowHideStatusDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ShowHideStatusDirective,\n    selectors: [[\"\", \"showHideStatus\", \"\"]],\n    inputs: {\n      showHideStatus: \"showHideStatus\"\n    }\n  });\n  return ShowHideStatusDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ShowHideInputDirective = /*#__PURE__*/(() => {\n  class ShowHideInputDirective {\n    constructor(service, el, renderer) {\n      this.service = service;\n      this.el = el;\n      this.renderer = renderer;\n    }\n\n    registerElementId() {\n      if (!this.id) {\n        throw new Error(`No attribute [id] found.`);\n      }\n\n      this.service.setShow(this.id, this.el.nativeElement.type !== 'password');\n    }\n\n    ngOnInit() {\n      this.registerElementId();\n      this.service.getObservable(this.id).subscribe(show => this.renderer.setAttribute(this.el.nativeElement, 'type', show ? 'text' : 'password'));\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  ShowHideInputDirective.ɵfac = function ShowHideInputDirective_Factory(t) {\n    return new (t || ShowHideInputDirective)(i0.ɵɵdirectiveInject(ShowHideService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  ShowHideInputDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ShowHideInputDirective,\n    selectors: [[\"input\", \"showHideInput\", \"\"]],\n    inputs: {\n      id: \"id\"\n    }\n  });\n  return ShowHideInputDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* eslint-disable no-bitwise */\n\n\nconst _c0 = function (a0) {\n  return {\n    id: a0\n  };\n};\n\nconst _c1 = [\"*\"];\nvar BtnStyle = /*#__PURE__*/(() => {\n  (function (BtnStyle) {\n    BtnStyle[\"Primary\"] = \"primary\";\n    BtnStyle[\"Secondary\"] = \"secondary\";\n    BtnStyle[\"Success\"] = \"success\";\n    BtnStyle[\"Danger\"] = \"danger\";\n    BtnStyle[\"Warning\"] = \"warning\";\n    BtnStyle[\"Info\"] = \"info\";\n    BtnStyle[\"Dark\"] = \"dark\";\n    BtnStyle[\"Light\"] = \"light\";\n  })(BtnStyle || (BtnStyle = {}));\n\n  return BtnStyle;\n})();\n\n// hail jed https://gist.github.com/jed/982883\nconst uuid = a => a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ('' + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);\n/**\n * Add a split input button to password or text input. Toggles input type between \"text\" and \"password\".\n *\n * @example\n * <show-hide-password size=\"sm|lg\">\n * <input type=\"password\" name=... />\n * </show-hide-password>\n */\n\n\nlet ShowHidePasswordComponent = /*#__PURE__*/(() => {\n  class ShowHidePasswordComponent {\n    constructor(service, elem, renderer) {\n      this.service = service;\n      this.elem = elem;\n      this.renderer = renderer;\n      this.btnStyle = BtnStyle.Secondary;\n      this.btnOutline = true;\n      this.faEye = faEye;\n      this.faEyeSlash = faEyeSlash;\n    }\n\n    ngOnInit() {\n      this.input = this.elem.nativeElement.querySelector('input');\n\n      if (!this.input) {\n        throw new Error(`No input element found.`);\n      }\n\n      this.id = this.input.getAttribute('id');\n\n      if (!this.id) {\n        this.id = 'showHideInput_' + uuid();\n        this.renderer.setAttribute(this.input, 'id', this.id);\n      }\n\n      this.renderer.addClass(this.elem.nativeElement, 'input-group');\n\n      if (this.size === 'sm') {\n        this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');\n      } else if (this.size === 'lg') {\n        this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');\n      }\n\n      this.isHidden = this.input.type === 'password';\n      this.renderer.addClass(this.input, 'form-control'); // just to be sure\n\n      this.service.setShow(this.id, this.input.type !== 'password');\n      this.subscription = this.service.getObservable(this.id).subscribe(show => {\n        this.isHidden = !show;\n        this.renderer.setAttribute(this.input, 'type', show ? 'text' : 'password');\n      });\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  ShowHidePasswordComponent.ɵfac = function ShowHidePasswordComponent_Factory(t) {\n    return new (t || ShowHidePasswordComponent)(i0.ɵɵdirectiveInject(ShowHideService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  ShowHidePasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ShowHidePasswordComponent,\n    selectors: [[\"show-hide-password\"]],\n    inputs: {\n      btnStyle: \"btnStyle\",\n      btnOutline: \"btnOutline\",\n      size: \"size\"\n    },\n    ngContentSelectors: _c1,\n    decls: 3,\n    vars: 7,\n    consts: [[\"type\", \"button\", 1, \"btn\", \"ngx-show-hide-password\", 3, \"ngClass\", \"showHideTrigger\"], [\"size\", \"lg\", 3, \"fixedWidth\", \"icon\", \"showHideStatus\"]],\n    template: function ShowHidePasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵelementStart(1, \"button\", 0);\n        i0.ɵɵelement(2, \"fa-icon\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", ctx.btnOutline ? \"btn-outline-\" + ctx.btnStyle : \"btn-\" + ctx.btnStyle)(\"showHideTrigger\", ctx.id);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"fixedWidth\", true)(\"icon\", ctx.isHidden ? ctx.faEye : ctx.faEyeSlash)(\"showHideStatus\", i0.ɵɵpureFunction1(5, _c0, ctx.id));\n      }\n    },\n    directives: [i2.NgClass, ShowHideTriggerDirective, i4.FaIconComponent, ShowHideStatusDirective],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ShowHidePasswordComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ShowHidePasswordModule = /*#__PURE__*/(() => {\n  class ShowHidePasswordModule {}\n\n  ShowHidePasswordModule.ɵfac = function ShowHidePasswordModule_Factory(t) {\n    return new (t || ShowHidePasswordModule)();\n  };\n\n  ShowHidePasswordModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: ShowHidePasswordModule\n  });\n  ShowHidePasswordModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, FontAwesomeModule]]\n  });\n  return ShowHidePasswordModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ShowHidePasswordModule, {\n    declarations: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective],\n    imports: [CommonModule, FormsModule, FontAwesomeModule],\n    exports: [ShowHidePasswordComponent, ShowHideTriggerDirective, ShowHideInputDirective, ShowHideStatusDirective]\n  });\n})();\n/*\n * Public API Surface of ngx-show-hide-password\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BtnStyle, ShowHideInputDirective, ShowHidePasswordComponent, ShowHidePasswordModule, ShowHideService, ShowHideStatusDirective, ShowHideTriggerDirective }; //# sourceMappingURL=ngx-show-hide-password.mjs.map","map":null,"metadata":{},"sourceType":"module"}